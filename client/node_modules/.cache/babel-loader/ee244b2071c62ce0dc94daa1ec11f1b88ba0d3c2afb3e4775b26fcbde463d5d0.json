{"ast":null,"code":"var _jsxFileName = \"D:\\\\FACULTATE\\\\LICENTA\\\\client\\\\src\\\\pages\\\\AddRecipe.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage, FieldArray, FormikProps } from 'formik';\nimport * as Yup from 'yup';\nimport axios from \"axios\";\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddRecipe() {\n  _s();\n  const [listOfRecipes, setListOfRecipes] = useState([]);\n  const [ingredients, setIngredients] = useState([]);\n  const [products, setProducts] = useState([]);\n  useEffect(() => {\n    axios.get('http://localhost:3001/ingredients').then(response => {\n      const names = response.data.map(ingredient => ingredient.name);\n      setIngredients(names);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  useEffect(() => {\n    axios.get('http://localhost:3001/products').then(response => {\n      const names = response.data.map(product => product.name);\n      setProducts(names);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  console.log(ingredients);\n  console.log(products);\n\n  // const initialValues = {\n  //     name: \"\",\n  //     category: \"\",\n  //     quantity: \"\",\n  //     ingredients: [],\n  // };\n\n  // const onSubmit = (data) => {\n  //     const postData = {\n  //         name: data.name,\n  //         category: data.category,\n  //         quantity: data.quantity,\n  //         ingredients: data.ingredients.reduce((acc, ingredient) => {\n  //             acc[ingredient.name] = ingredient.quantity;\n  //             return acc;\n  //         }, {})\n  //     };\n  //     // console.log(postData.ingredients)\n\n  //     axios.post(\"http://localhost:3001/recipes\", postData).then((response) => {\n  //         setListOfRecipes(postData)\n  //         console.log(\"it worked\");\n  //     });\n\n  // };\n\n  // const validationSchema = Yup.object().shape({\n  //     name: Yup.string().required(),\n  //     category: Yup.string().required(),\n  //     quantity: Yup.number().required(),\n  //     // ingredients: Yup.array().of(\n  //     //     Yup.object().shape({\n  //     //         name: Yup.string().required(),\n  //     //         quantity: Yup.string().required(),\n  //     //     })\n  //     // ),\n  // });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"addrecipe\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 10\n  }, this);\n  //    ( \n  // <div className=\"addProductPage\">\n  //   <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema} >\n  //     {({ values }) => (\n  //     <Form>\n  //         <label>Product Name: </label>\n  //         <ErrorMessage name=\"name\" component=\"span\"/>\n  //         <Field autoComplete=\"off\" id=\"inputAddProduct\" name=\"name\" placeholder=\"Example: Coca Cola\" />\n  //         <label>Category: </label>\n  //         <ErrorMessage name=\"category\" component=\"span\"/>\n  //         <Field autoComplete=\"off\" id=\"inputAddProduct\" name=\"category\" placeholder=\"Example: sugars \" />\n  //         <label>Quantity: </label>\n  //         <ErrorMessage name=\"quantity\" component=\"span\"/>\n  //         <Field autoComplete=\"off\" id=\"inputAddProduct\" name=\"quantity\" placeholder=\"Example: 2.5\" />\n\n  //         <FieldArray name=\"ingredients\">\n  //             {({ push, remove }) => (\n  //               <>\n  //                 <label>Ingredients: </label>\n  //                 {values.ingredients.map((ingredient, index) => (\n  //                     <div key={index}>\n  //                         <Field autoComplete=\"off\" name={`ingredients[${index}].name`} as=\"select\" placeholder=\"Ingredient Name:\">\n  //                             <option value=\"\">Select an ingredient</option>\n  //                             {ingredients.map((ingredientName, i) => (\n  //                                 <option key={i} value={ingredientName}>{ingredientName}</option>\n  //                             ))}\n  //                         </Field>\n  //                         <ErrorMessage name={`ingredientsp${index}].name`} component = \"span\"/>\n  //                         <Field autoComplete=\"off\" name={`ingredients[${index}].quantity`} placeholder=\"Ingredient Quantity:\" />\n  //                         <ErrorMessage name={`ingredients[${index}].quantity`} component = \"span\"/>\n  //                         {index > 0 && (\n  //                             <button type=\"button\" onClick={() => remove(index)}>\n  //                                 Remove Last Ingredient\n  //                             </button>\n  //                         )}\n  //                     </div>\n  //                 ))}\n  //                 <button type=\"button\" onClick={() => push({name: \"\", quantity: \"\"})}>\n  //                     Add Ingredient\n  //                 </button>\n  //               </>\n  //             )}\n  //         </FieldArray>\n\n  //         <button type=\"submit\">Add Product</button>\n  //     </Form>\n  //     )}\n  //    </Formik>\n  // </div>\n  //   );\n}\n_s(AddRecipe, \"WabLE7Ziz4z6m8ixgg2gXuIeD6I=\");\n_c = AddRecipe;\nexport default AddRecipe;\nvar _c;\n$RefreshReg$(_c, \"AddRecipe\");","map":{"version":3,"names":["React","Formik","Form","Field","ErrorMessage","FieldArray","FormikProps","Yup","axios","useEffect","useState","jsxDEV","_jsxDEV","AddRecipe","_s","listOfRecipes","setListOfRecipes","ingredients","setIngredients","products","setProducts","get","then","response","names","data","map","ingredient","name","catch","error","console","log","product","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/FACULTATE/LICENTA/client/src/pages/AddRecipe.js"],"sourcesContent":["import React from 'react';\r\nimport {Formik, Form, Field, ErrorMessage, FieldArray, FormikProps} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from 'react';\r\n\r\n\r\n\r\nfunction AddRecipe() {\r\n\r\n    const [listOfRecipes, setListOfRecipes] = useState([]);\r\n\r\n    const [ingredients, setIngredients] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:3001/ingredients').then((response) => {\r\n            const names = response.data.map((ingredient) => ingredient.name);\r\n            setIngredients(names);\r\n        }).catch((error) => {\r\n            console.log(error);\r\n        });\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n        axios.get('http://localhost:3001/products').then((response) => {\r\n            const names = response.data.map((product) => product.name);\r\n            setProducts(names);\r\n        }).catch((error) => {\r\n            console.log(error);\r\n        });\r\n    }, []);\r\n\r\n    console.log(ingredients)\r\n    console.log(products)\r\n\r\n\r\n    // const initialValues = {\r\n    //     name: \"\",\r\n    //     category: \"\",\r\n    //     quantity: \"\",\r\n    //     ingredients: [],\r\n    // };\r\n\r\n    \r\n    // const onSubmit = (data) => {\r\n    //     const postData = {\r\n    //         name: data.name,\r\n    //         category: data.category,\r\n    //         quantity: data.quantity,\r\n    //         ingredients: data.ingredients.reduce((acc, ingredient) => {\r\n    //             acc[ingredient.name] = ingredient.quantity;\r\n    //             return acc;\r\n    //         }, {})\r\n    //     };\r\n    //     // console.log(postData.ingredients)\r\n\r\n\r\n    //     axios.post(\"http://localhost:3001/recipes\", postData).then((response) => {\r\n    //         setListOfRecipes(postData)\r\n    //         console.log(\"it worked\");\r\n    //     });\r\n\r\n    // };\r\n\r\n\r\n    // const validationSchema = Yup.object().shape({\r\n    //     name: Yup.string().required(),\r\n    //     category: Yup.string().required(),\r\n    //     quantity: Yup.number().required(),\r\n    //     // ingredients: Yup.array().of(\r\n    //     //     Yup.object().shape({\r\n    //     //         name: Yup.string().required(),\r\n    //     //         quantity: Yup.string().required(),\r\n    //     //     })\r\n    //     // ),\r\n    // });\r\n\r\n\r\n  return <div>addrecipe</div>\r\n//    ( \r\n    // <div className=\"addProductPage\">\r\n    //   <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema} >\r\n    //     {({ values }) => (\r\n    //     <Form>\r\n    //         <label>Product Name: </label>\r\n    //         <ErrorMessage name=\"name\" component=\"span\"/>\r\n    //         <Field autoComplete=\"off\" id=\"inputAddProduct\" name=\"name\" placeholder=\"Example: Coca Cola\" />\r\n    //         <label>Category: </label>\r\n    //         <ErrorMessage name=\"category\" component=\"span\"/>\r\n    //         <Field autoComplete=\"off\" id=\"inputAddProduct\" name=\"category\" placeholder=\"Example: sugars \" />\r\n    //         <label>Quantity: </label>\r\n    //         <ErrorMessage name=\"quantity\" component=\"span\"/>\r\n    //         <Field autoComplete=\"off\" id=\"inputAddProduct\" name=\"quantity\" placeholder=\"Example: 2.5\" />\r\n\r\n    //         <FieldArray name=\"ingredients\">\r\n    //             {({ push, remove }) => (\r\n    //               <>\r\n    //                 <label>Ingredients: </label>\r\n    //                 {values.ingredients.map((ingredient, index) => (\r\n    //                     <div key={index}>\r\n    //                         <Field autoComplete=\"off\" name={`ingredients[${index}].name`} as=\"select\" placeholder=\"Ingredient Name:\">\r\n    //                             <option value=\"\">Select an ingredient</option>\r\n    //                             {ingredients.map((ingredientName, i) => (\r\n    //                                 <option key={i} value={ingredientName}>{ingredientName}</option>\r\n    //                             ))}\r\n    //                         </Field>\r\n    //                         <ErrorMessage name={`ingredientsp${index}].name`} component = \"span\"/>\r\n    //                         <Field autoComplete=\"off\" name={`ingredients[${index}].quantity`} placeholder=\"Ingredient Quantity:\" />\r\n    //                         <ErrorMessage name={`ingredients[${index}].quantity`} component = \"span\"/>\r\n    //                         {index > 0 && (\r\n    //                             <button type=\"button\" onClick={() => remove(index)}>\r\n    //                                 Remove Last Ingredient\r\n    //                             </button>\r\n    //                         )}\r\n    //                     </div>\r\n    //                 ))}\r\n    //                 <button type=\"button\" onClick={() => push({name: \"\", quantity: \"\"})}>\r\n    //                     Add Ingredient\r\n    //                 </button>\r\n    //               </>\r\n    //             )}\r\n    //         </FieldArray>\r\n\r\n    //         <button type=\"submit\">Add Product</button>\r\n    //     </Form>\r\n    //     )}\r\n    //    </Formik>\r\n    // </div>\r\n//   );\r\n}\r\n\r\nexport default AddRecipe;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAEC,YAAY,EAAEC,UAAU,EAAEC,WAAW,QAAO,QAAQ;AACjF,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI5C,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAEjB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAG5CD,SAAS,CAAC,MAAM;IACZD,KAAK,CAACa,GAAG,CAAC,mCAAmC,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;MAC9D,MAAMC,KAAK,GAAGD,QAAQ,CAACE,IAAI,CAACC,GAAG,CAAEC,UAAU,IAAKA,UAAU,CAACC,IAAI,CAAC;MAChEV,cAAc,CAACM,KAAK,CAAC;IACzB,CAAC,CAAC,CAACK,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAENrB,SAAS,CAAC,MAAM;IACZD,KAAK,CAACa,GAAG,CAAC,gCAAgC,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;MAC3D,MAAMC,KAAK,GAAGD,QAAQ,CAACE,IAAI,CAACC,GAAG,CAAEO,OAAO,IAAKA,OAAO,CAACL,IAAI,CAAC;MAC1DR,WAAW,CAACI,KAAK,CAAC;IACtB,CAAC,CAAC,CAACK,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAENC,OAAO,CAACC,GAAG,CAACf,WAAW,CAAC;EACxBc,OAAO,CAACC,GAAG,CAACb,QAAQ,CAAC;;EAGrB;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;;EAEA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGF,oBAAOP,OAAA;IAAAsB,QAAA,EAAK;EAAS;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAC7B;EACI;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACJ;AACA;AAACxB,EAAA,CA3HQD,SAAS;AAAA0B,EAAA,GAAT1B,SAAS;AA6HlB,eAAeA,SAAS;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}