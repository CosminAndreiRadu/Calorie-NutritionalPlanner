{"ast":null,"code":"var _jsxFileName = \"D:\\\\FACULTATE\\\\LICENTA\\\\client\\\\src\\\\pages\\\\GenerateMealPlan.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from \"axios\";\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GenerateMealPlan() {\n  _s();\n  const email = sessionStorage.getItem(\"email\");\n  const [listOfRecipes, setlistOfRecipes] = useState([]);\n  const [listOfConstraintedRecipes, setlistOfConstraintedRecipes] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    axios.get(\"http://localhost:3001/recipes\").then(response => {\n      setlistOfRecipes(response.data);\n    });\n  }, []);\n  const initialValues = {\n    name: \"\",\n    type: \"\"\n  };\n  const onSubmit = async data => {\n    let score;\n    let constraints;\n    let selectedRecipeIds = [];\n    var userId;\n\n    // axios.get(`http://localhost:3001/authentication/${email}`).then((response) => {\n    //     userId = response.data;\n    //     axios.get(`http://localhost:3001/profiles/${userId}`).then((response) => {\n    //          score = response.data.score;\n    //          constraints = response.data.constraints;\n    //          if (constraints) {\n    //             const constraintedRecipes =  listOfRecipes.filter((recipe) =>\n    //               constraints.includes(recipe.category)\n    //             );\n    //             setlistOfConstraintedRecipes(constraintedRecipes);\n    //           } else {\n    //             setlistOfConstraintedRecipes(listOfRecipes);\n    //           }\n    //           if (listOfConstraintedRecipes.length > 0) {\n\n    //             const requests = listOfConstraintedRecipes.map((recipe) => {\n    //                 return axios.get(`http://localhost:3001/recipes/portion/${recipe.id}`);\n    //             });\n\n    //             Promise.all(requests).then((responses) => {\n    //               responses.forEach((response, index) => {\n    //                 const recipe = listOfConstraintedRecipes[index];\n    //                 recipe.totalCalories = response.data.portion;\n    //                 recipe.quantity = recipe.quantity / response.data.portions;\n    //               });\n    //             });\n\n    //             console.log(listOfConstraintedRecipes);\n\n    //           }\n\n    //           var leftScore;\n    //           switch(data.type) {\n    //             case 'cut':\n    //               leftScore = score - 300;\n    //               break;\n    //             case 'mantain':\n    //               leftScore = score;\n    //               break;\n    //             case 'bulk':\n    //               leftScore = score + 300;\n    //               break;\n    //             default:\n    //               break;\n    //           }\n    //           while (selectedRecipeIds.length < 3) {\n    //             const randomArrayIndex = Math.floor(Math.random() * listOfConstraintedRecipes.length);\n    //             const randomRecipe = listOfConstraintedRecipes[randomArrayIndex];\n\n    //             if (randomRecipe.totalCalories <= leftScore ) {\n    //               selectedRecipeIds.push(randomRecipe.id);\n    //               leftScore -= randomRecipe.totalCalories;\n    //               listOfConstraintedRecipes.splice(randomArrayIndex, 1);\n    //             }\n    //             else {\n    //               listOfConstraintedRecipes.splice(randomArrayIndex, 1);\n    //             }\n    //           }\n\n    //           console.log(selectedRecipeIds);\n    //           const temp = {\n    //             recipeIds: selectedRecipeIds,\n    //             name: data.name,\n    //             type : data.type,\n    //             userId: userId\n    //           };\n    //           axios.post(\"http://localhost:3001/mealplans/generate\", temp).then((response) => {\n    //             //console.log(response.data);\n    //           });\n\n    //           navigate(\"/mealplans\");\n\n    //       });\n\n    // });\n\n    async function fetchData() {\n      try {\n        // Step 1: Fetch the user ID\n        const response1 = await axios.get(`http://localhost:3001/authentication/${email}`);\n        const userId = response1.data;\n\n        // Step 2: Fetch the user's profile\n        const response2 = await axios.get(`http://localhost:3001/profiles/${userId}`);\n        const {\n          score,\n          constraints\n        } = response2.data;\n\n        // Step 3: Filter recipes based on constraints\n        let listOfConstraintedRecipes = listOfRecipes;\n        if (constraints) {\n          listOfConstraintedRecipes = listOfRecipes.filter(recipe => constraints.includes(recipe.category));\n        }\n\n        // Step 4: Fetch data for each recipe sequentially\n        const selectedRecipeIds = [];\n        let leftScore;\n        switch (data.type) {\n          case 'cut':\n            leftScore = score - 300;\n            break;\n          case 'maintain':\n            leftScore = score;\n            break;\n          case 'bulk':\n            leftScore = score + 300;\n            break;\n          default:\n            break;\n        }\n        while (selectedRecipeIds.length < 3 && listOfConstraintedRecipes.length > 0) {\n          const randomArrayIndex = Math.floor(Math.random() * listOfConstraintedRecipes.length);\n          const randomRecipe = listOfConstraintedRecipes[randomArrayIndex];\n\n          // Fetch data for the recipe\n          const response3 = await axios.get(`http://localhost:3001/recipes/portion/${randomRecipe.id}`);\n          randomRecipe.totalCalories = response3.data.portion;\n          randomRecipe.quantity = randomRecipe.quantity / response3.data.portions;\n          if (randomRecipe.totalCalories <= leftScore) {\n            selectedRecipeIds.push(randomRecipe.id);\n            leftScore -= randomRecipe.totalCalories;\n          }\n          listOfConstraintedRecipes.splice(randomArrayIndex, 1);\n        }\n        console.log(selectedRecipeIds);\n\n        // Step 5: Post data to generate meal plan\n        const mealPlanData = {\n          recipeIds: selectedRecipeIds,\n          name: data.name,\n          type: data.type,\n          userId: userId\n        };\n        const response4 = await axios.post(\"http://localhost:3001/mealplans/generate\", mealPlanData);\n\n        // Step 6: Navigate after all requests are completed\n        navigate(\"/mealplans\");\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    }\n\n    // Call the fetchData function to start the sequential requests\n    fetchData();\n  };\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().required(),\n    type: Yup.string().required()\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"createProfilePage\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"createProfilePageForm\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: initialValues,\n          onSubmit: onSubmit,\n          validationSchema: validationSchema,\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Meal Plan Name: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"name\",\n              component: \"span\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              autoComplete: \"off\",\n              id: \"inputGenerateMealPlan\",\n              name: \"name\",\n              placeholder: \"Example: 19 June Monday \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Goal : \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"type\",\n              component: \"span\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              as: \"select\",\n              id: \"inputGenerateMealPlan\",\n              name: \"type\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select a Goal\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"cut\",\n                children: \"Loose Weight\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"mantain\",\n                children: \"Maintain\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"bulk\",\n                children: \"Gain Weight\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Generate MealPlan\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n}\n_s(GenerateMealPlan, \"nK31gB+kUHSdwtT+L68mxMLsBjI=\", false, function () {\n  return [useNavigate];\n});\n_c = GenerateMealPlan;\nexport default GenerateMealPlan;\nvar _c;\n$RefreshReg$(_c, \"GenerateMealPlan\");","map":{"version":3,"names":["React","Link","Formik","Form","Field","ErrorMessage","useEffect","useState","useParams","useNavigate","axios","Yup","jsxDEV","_jsxDEV","GenerateMealPlan","_s","email","sessionStorage","getItem","listOfRecipes","setlistOfRecipes","listOfConstraintedRecipes","setlistOfConstraintedRecipes","navigate","get","then","response","data","initialValues","name","type","onSubmit","score","constraints","selectedRecipeIds","userId","fetchData","response1","response2","filter","recipe","includes","category","leftScore","length","randomArrayIndex","Math","floor","random","randomRecipe","response3","id","totalCalories","portion","quantity","portions","push","splice","console","log","mealPlanData","recipeIds","response4","post","error","validationSchema","object","shape","string","required","className","children","fileName","_jsxFileName","lineNumber","columnNumber","component","autoComplete","placeholder","as","value","_c","$RefreshReg$"],"sources":["D:/FACULTATE/LICENTA/client/src/pages/GenerateMealPlan.js"],"sourcesContent":["import React from 'react'\r\nimport {Link} from \"react-router-dom\"\r\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\r\nimport { useEffect, useState} from 'react';\r\nimport { useParams , useNavigate } from 'react-router-dom';\r\nimport axios from \"axios\";\r\nimport * as Yup from 'yup';\r\n\r\n function GenerateMealPlan() {\r\n    const email = sessionStorage.getItem(\"email\");\r\n\r\n    const [listOfRecipes, setlistOfRecipes] = useState([]);\r\n    const [listOfConstraintedRecipes, setlistOfConstraintedRecipes] = useState([]);\r\n    const navigate = useNavigate();\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:3001/recipes\").then((response) => {\r\n          setlistOfRecipes(response.data);\r\n        });\r\n      }, []);\r\n\r\n    const initialValues = {\r\n        name: \"\",\r\n        type: \"\",\r\n    };\r\n\r\n\r\n\r\n    const  onSubmit = async (data) => {\r\n\r\n        let score;\r\n        let constraints;\r\n        let selectedRecipeIds = [];\r\n        var userId;\r\n\r\n        // axios.get(`http://localhost:3001/authentication/${email}`).then((response) => {\r\n        //     userId = response.data;\r\n        //     axios.get(`http://localhost:3001/profiles/${userId}`).then((response) => {\r\n        //          score = response.data.score;\r\n        //          constraints = response.data.constraints;\r\n        //          if (constraints) {\r\n        //             const constraintedRecipes =  listOfRecipes.filter((recipe) =>\r\n        //               constraints.includes(recipe.category)\r\n        //             );\r\n        //             setlistOfConstraintedRecipes(constraintedRecipes);\r\n        //           } else {\r\n        //             setlistOfConstraintedRecipes(listOfRecipes);\r\n        //           }\r\n        //           if (listOfConstraintedRecipes.length > 0) {\r\n\r\n        //             const requests = listOfConstraintedRecipes.map((recipe) => {\r\n        //                 return axios.get(`http://localhost:3001/recipes/portion/${recipe.id}`);\r\n        //             });\r\n                \r\n        //             Promise.all(requests).then((responses) => {\r\n        //               responses.forEach((response, index) => {\r\n        //                 const recipe = listOfConstraintedRecipes[index];\r\n        //                 recipe.totalCalories = response.data.portion;\r\n        //                 recipe.quantity = recipe.quantity / response.data.portions;\r\n        //               });\r\n        //             });\r\n\r\n\r\n        //             console.log(listOfConstraintedRecipes);\r\n\r\n        //           }\r\n\r\n        //           var leftScore;\r\n        //           switch(data.type) {\r\n        //             case 'cut':\r\n        //               leftScore = score - 300;\r\n        //               break;\r\n        //             case 'mantain':\r\n        //               leftScore = score;\r\n        //               break;\r\n        //             case 'bulk':\r\n        //               leftScore = score + 300;\r\n        //               break;\r\n        //             default:\r\n        //               break;\r\n        //           }\r\n        //           while (selectedRecipeIds.length < 3) {\r\n        //             const randomArrayIndex = Math.floor(Math.random() * listOfConstraintedRecipes.length);\r\n        //             const randomRecipe = listOfConstraintedRecipes[randomArrayIndex];\r\n                    \r\n        //             if (randomRecipe.totalCalories <= leftScore ) {\r\n        //               selectedRecipeIds.push(randomRecipe.id);\r\n        //               leftScore -= randomRecipe.totalCalories;\r\n        //               listOfConstraintedRecipes.splice(randomArrayIndex, 1);\r\n        //             }\r\n        //             else {\r\n        //               listOfConstraintedRecipes.splice(randomArrayIndex, 1);\r\n        //             }\r\n        //           }\r\n\r\n        //           console.log(selectedRecipeIds);\r\n        //           const temp = {\r\n        //             recipeIds: selectedRecipeIds,\r\n        //             name: data.name,\r\n        //             type : data.type,\r\n        //             userId: userId\r\n        //           };\r\n        //           axios.post(\"http://localhost:3001/mealplans/generate\", temp).then((response) => {\r\n        //             //console.log(response.data);\r\n        //           });\r\n\r\n                  \r\n        //           navigate(\"/mealplans\");\r\n\r\n\r\n \r\n        //       });\r\n\r\n        // });\r\n\r\n\r\n\r\n        async function fetchData() {\r\n          try {\r\n            // Step 1: Fetch the user ID\r\n            const response1 = await axios.get(`http://localhost:3001/authentication/${email}`);\r\n            const userId = response1.data;\r\n        \r\n            // Step 2: Fetch the user's profile\r\n            const response2 = await axios.get(`http://localhost:3001/profiles/${userId}`);\r\n            const { score, constraints } = response2.data;\r\n        \r\n            // Step 3: Filter recipes based on constraints\r\n            let listOfConstraintedRecipes = listOfRecipes;\r\n            if (constraints) {\r\n              listOfConstraintedRecipes = listOfRecipes.filter((recipe) =>\r\n                constraints.includes(recipe.category)\r\n              );\r\n            }\r\n        \r\n            // Step 4: Fetch data for each recipe sequentially\r\n            const selectedRecipeIds = [];\r\n            let leftScore;\r\n        \r\n            switch (data.type) {\r\n              case 'cut':\r\n                leftScore = score - 300;\r\n                break;\r\n              case 'maintain':\r\n                leftScore = score;\r\n                break;\r\n              case 'bulk':\r\n                leftScore = score + 300;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n        \r\n            while (selectedRecipeIds.length < 3 && listOfConstraintedRecipes.length > 0) {\r\n              const randomArrayIndex = Math.floor(Math.random() * listOfConstraintedRecipes.length);\r\n              const randomRecipe = listOfConstraintedRecipes[randomArrayIndex];\r\n        \r\n              // Fetch data for the recipe\r\n              const response3 = await axios.get(`http://localhost:3001/recipes/portion/${randomRecipe.id}`);\r\n              randomRecipe.totalCalories = response3.data.portion;\r\n              randomRecipe.quantity = randomRecipe.quantity / response3.data.portions;\r\n        \r\n              if (randomRecipe.totalCalories <= leftScore) {\r\n                selectedRecipeIds.push(randomRecipe.id);\r\n                leftScore -= randomRecipe.totalCalories;\r\n              }\r\n        \r\n              listOfConstraintedRecipes.splice(randomArrayIndex, 1);\r\n            }\r\n        \r\n            console.log(selectedRecipeIds);\r\n        \r\n            // Step 5: Post data to generate meal plan\r\n            const mealPlanData = {\r\n              recipeIds: selectedRecipeIds,\r\n              name: data.name,\r\n              type: data.type,\r\n              userId: userId\r\n            };\r\n            const response4 = await axios.post(\"http://localhost:3001/mealplans/generate\", mealPlanData);\r\n        \r\n            // Step 6: Navigate after all requests are completed\r\n            navigate(\"/mealplans\");\r\n          } catch (error) {\r\n            console.error(\"Error:\", error);\r\n          }\r\n        }\r\n        \r\n        // Call the fetchData function to start the sequential requests\r\n        fetchData();\r\n\r\n    };\r\n\r\n\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        name: Yup.string().required(),\r\n        type: Yup.string().required(),\r\n\r\n    });\r\n\r\n\r\n  return (\r\n    <div className='App'>\r\n<div className='createProfilePage'>\r\n        {/* <Link to=\"/\">Back</Link> */}\r\n        <div className='createProfilePageForm'>\r\n            <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>\r\n                <Form>\r\n                    <label>Meal Plan Name: </label>\r\n                    <ErrorMessage name=\"name\" component=\"span\"/>\r\n                    <Field autoComplete=\"off\" id=\"inputGenerateMealPlan\" name=\"name\" placeholder=\"Example: 19 June Monday \" />\r\n\r\n                    <label>Goal : </label>\r\n                    <ErrorMessage name=\"type\" component=\"span\"/>\r\n                    <Field as=\"select\" id=\"inputGenerateMealPlan\" name=\"type\">\r\n                      <option value=\"\">Select a Goal</option>\r\n                        <option value=\"cut\">Loose Weight</option>\r\n                        <option value=\"mantain\">Maintain</option>\r\n                        <option value=\"bulk\">Gain Weight</option>\r\n                    </Field>\r\n                    \r\n\r\n                    <button type=\"submit\">Generate MealPlan</button>\r\n                </Form>\r\n            </Formik>\r\n        </div>\r\n    </div>\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default GenerateMealPlan\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}